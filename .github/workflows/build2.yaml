name: Build, Test, and Push Docker Image / eks and argocd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SONAR_URL: ${{ secrets.SONAR_URL }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  EKS_CLUSTER: vprofile1-eks
  REGION: us-east-2
  IMAGE_TAG: ${{ github.run_number }}
  ECR_REPOSITORY: vprofile-repo
  REGISTRY: ${{ secrets.REGISTRY }}
  ROLE_ARN: ${{ secrets.ROLE_ARN }}

jobs:
  Testing:
    name: "Build, Test, and Analyze Code"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build and Test with Maven
        run: mvn clean test

      - name: Run Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup SonarQube Scanner
        uses: warchant/setup-sonar-scanner@v7

      - name: Analyze Code with SonarQube
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ env.SONAR_URL }} \
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -Dsonar.sources=src/ \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml

      - name: SonarQube Quality Gate
        id: sonarqube-quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_URL: ${{ env.SONAR_URL }}

  DockerBuildPush:
    name: "Build and Push Docker Image to ECR"
    runs-on: ubuntu-latest
    needs: Testing
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

  DeployEKS:
    name: "Deploy to EKS with Helm and ArgoCD"
    runs-on: ubuntu-latest
    needs: DockerBuildPush
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Verify AWS Authentication
        run: |
          aws sts get-caller-identity
          aws eks describe-cluster --name ${{ env.EKS_CLUSTER }} --region ${{ env.REGION }}

      - name: Verify Kubernetes access
        run: |
          kubectl get nodes
          kubectl cluster-info

      - name: Set up Helm
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: Check existing ArgoCD installation
        continue-on-error: true
        run: |
          if kubectl get namespace argocd >/dev/null 2>&1; then
            echo "ArgoCD namespace exists"
            if helm list -n argocd | grep -q "argocd"; then
              echo "Removing existing ArgoCD installation"
              helm uninstall argocd -n argocd
              kubectl delete namespace argocd --timeout=60s
              sleep 10
            fi
          fi

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          helm install argocd argo/argo-cd \
            --namespace argocd \
            --set server.service.type=ClusterIP \
            --set global.securityContext.fsGroup=999 \
            --atomic \
            --timeout 10m

      - name: Wait for ArgoCD Components
        run: |
          echo "Waiting for core ArgoCD components..."
          
          # Wait for all deployments in argocd namespace
          kubectl wait --namespace argocd \
            --for=condition=available deployment \
            --all \
            --timeout=300s
          
          echo "Verifying ArgoCD pods..."
          kubectl get pods -n argocd

      - name: Prepare Application manifest
        run: |
          # Create temporary file to avoid modifying original
          cp argocd_app/application.yml argocd_app/application_modified.yml
          
          # Replace placeholders
          sed -i "s|{{ secrets.REGISTRY }}/{{ secrets.ECR_REPO_NAME }}|${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}|g" argocd_app/application.yml
          sed -i "s|{{ env.IMAGE_TAG }}|${{ env.IMAGE_TAG }}|g" argocd_app/application.yml
          
          # Validate the yaml
          kubectl apply --dry-run=client -f argocd_app/application.yml

      - name: Deploy Application
        run: |
          # Apply the Application manifest
          kubectl apply -f argocd_app/application.yml
          
          # Wait for CRD to be ready
          echo "Waiting for ArgoCD CRD..."
          kubectl wait --for=condition=established --timeout=60s crd/applications.argoproj.io || true
          
          # Give ArgoCD time to process the application
          sleep 20

      - name: Verify Application Deployment
        run: |
          echo "=== Checking ArgoCD Components ==="
          kubectl get pods -n argocd
          
          echo "=== Waiting for Application to Sync ==="
          # Wait for the Application to be created and start syncing
          for i in {1..30}; do
            STATUS=$(kubectl get application custom-helm-app -n argocd -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "NotFound")
            if [ "$STATUS" != "NotFound" ]; then
              echo "Application found, status: $STATUS"
              break
            fi
            echo "Waiting for Application to be created... ($i/30)"
            sleep 10
          done
          
          # Wait for sync to complete
          echo "Waiting for Application to sync..."
          for i in {1..30}; do
            SYNC_STATUS=$(kubectl get application custom-helm-app -n argocd -o jsonpath='{.status.sync.status}' 2>/dev/null)
            HEALTH_STATUS=$(kubectl get application custom-helm-app -n argocd -o jsonpath='{.status.health.status}' 2>/dev/null)
            
            echo "Current status - Sync: $SYNC_STATUS, Health: $HEALTH_STATUS"
            
            if [ "$SYNC_STATUS" = "Synced" ] && [ "$HEALTH_STATUS" = "Healthy" ]; then
              echo "Application is synced and healthy!"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Timeout waiting for application to sync"
              kubectl describe application custom-helm-app -n argocd
              exit 1
            fi
            
            sleep 10
          done

      - name: Verify Resources in Default Namespace
        run: |
          echo "=== Checking Deployed Resources ==="
          kubectl get all -n default
          
          echo "=== Waiting for Pods to be Ready ==="
          kubectl wait --for=condition=ready pods --all -n default --timeout=300s || true
          
          echo "=== Final Status ==="
          kubectl get pods -n default
          kubectl get application custom-helm-app -n argocd -o wide

      - name: Debug Info (if needed)
        if: failure()
        run: |
          echo "=== ArgoCD Application Status ==="
          kubectl describe application custom-helm-app -n argocd
          
          echo "=== ArgoCD Controller Logs ==="
          # Use correct StatefulSet name for logs
          kubectl logs -n argocd statefulset/argocd-application-controller --tail=100
          
          echo "=== Application Resources ==="
          kubectl get all -n default

     
