name: Build, Test, and Push Docker Image / eks and argocd

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SONAR_URL: ${{ secrets.SONAR_URL }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  EKS_CLUSTER: vprofile1-eks
  REGION: us-east-2
  IMAGE_TAG: ${{ github.run_number }}
  ECR_REPOSITORY: vprofile-repo
  REGISTRY: ${{ secrets.REGISTRY }}
  ROLE_ARN: ${{ secrets.ROLE_ARN }}

jobs:
  Testing:
    name: "Build, Test, and Analyze Code"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build and Test with Maven
        run: mvn clean test

      - name: Run Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup SonarQube Scanner
        uses: warchant/setup-sonar-scanner@v7

      - name: Analyze Code with SonarQube
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ env.SONAR_URL }} \
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }} \
            -Dsonar.sources=src/ \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml

      - name: SonarQube Quality Gate
        id: sonarqube-quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_URL: ${{ env.SONAR_URL }}

  DockerBuildPush:
    name: "Build and Push Docker Image to ECR"
    runs-on: ubuntu-latest
    needs: Testing
    permissions:
      id-token: write
      contents: read 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

  DeployEKS:
    name: "Deploy to EKS with Helm and ArgoCD"
    runs-on: ubuntu-latest
    needs: DockerBuildPush
    permissions:
      id-token: write
      contents: read 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Verify AWS Authentication
        run: |
          aws sts get-caller-identity
          aws eks describe-cluster --name ${{ env.EKS_CLUSTER }} --region ${{ env.REGION }}

      - name: Update kubeconfig with explicit token
        run: |
          # Fetch token and update kubeconfig directly
          aws eks get-token --cluster-name ${{ env.EKS_CLUSTER }} --region ${{ env.REGION }} | jq -r '.status.token' > token.json
          kubectl config set-credentials eks-admin --token=$(cat token.json)
          kubectl config set-context --current --user=eks-admin

      - name: Verify Kubernetes access
        run: |
          kubectl get nodes
          kubectl cluster-info

      - name: Set up Helm repositories
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update

      - name: Install or Upgrade ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd \
            --set server.service.type=ClusterIP \
            --set global.securityContext.fsGroup=999 \
            --wait \
            --timeout 10m

      - name: Wait for ArgoCD server to be ready
        run: |
          kubectl wait --namespace argocd \
            --for=condition=available deployment/argocd-server \
            --timeout=300s

      - name: Update ArgoCD Application YAML
        run: |
          sed -i "s|{{ secrets.REGISTRY }}/{{ secrets.ECR_REPO_NAME }}|${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}|g" argocd_app/application.yml
          sed -i "s|{{ env.IMAGE_TAG }}|${{ env.IMAGE_TAG }}|g" argocd_app/application.yml

      - name: Apply ArgoCD Application
        run: |
          kubectl apply -f argocd_app/application.yml
          kubectl wait --for=condition=established --timeout=60s \
            crd/applications.argoproj.io

      - name: Verify Deployment
        run: |
          kubectl wait --for=condition=ready pods --all --timeout=300s --namespace default
          kubectl get pods --namespace default
          kubectl get svc --namespace default
          kubectl get applications -n argocd

      - name: Check Application Health
        run: |
          kubectl wait --for=condition=ready applications --all --timeout=300s -n argocd
          echo "Application deployment complete"
        
