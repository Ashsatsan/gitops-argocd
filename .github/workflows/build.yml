name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SONAR_URL: ${{ secrets.SONAR_URL }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  EKS_CLUSTER: vprofile1-eks
  REGION: us-east-2
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  Testing:
    name: "Build, Test, and Analyze Code"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build with Maven
        run: mvn test

      - name: Run Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: Analyze with SonarCloud
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=src/ \
            -Dsonar.java.binaries=target/classes/com/visualpathit/account \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.java.checkstyle.reportsPaths=target/checkstyle-result.xml

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}

  DockerBuildPush:
    name: "Build and Push Docker Image to ECR"
    runs-on: ubuntu-latest
    needs: Testing  # Make sure the Testing job completes before this job runs

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin ${{ env.REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

  DeployEKS:
    name: "Install ArgoCD and Deploy Helm Charts"
    runs-on: ubuntu-latest
    needs: DockerBuildPush

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.REGION }}

      - name: Setup Kubernetes and Helm
        uses: azure/setup-kubectl@v3

      - name: Update Kubeconfig for EKS
        run: aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Install ArgoCD in EKS
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm upgrade --install argocd argo/argo-cd \
            --namespace argocd --create-namespace \
            --set server.service.type=LoadBalancer

      
      - name: Deploy Helm Charts via ArgoCD
        run: |
          kubectl apply -f argocd_app/application.yml  # Apply the ArgoCD application configuration
          helm upgrade --install project1-stack helm/projcharts \
          --namespace default \
          --set image.appimage=${{ secrets.REGISTRY }}/${{ secrets.ECR_REPO_NAME }} \
          --set image.apptag=${{ env.IMAGE_TAG }}
  
         
      
